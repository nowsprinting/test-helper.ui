// Copyright (c) 2023-2025 Koji Hasegawa.
// This software is released under the MIT License.

using System;
using System.Diagnostics.CodeAnalysis;
using System.Text;
using System.Threading;
using Cysharp.Threading.Tasks;
using TestHelper.Random;
using TestHelper.UI.Annotations;
using TestHelper.UI.Extensions;
using TestHelper.UI.Operators.Utils;
using TestHelper.UI.Random;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
#if ENABLE_TMP
using TMPro;
#endif

namespace TestHelper.UI.Operators
{
    /// <summary>
    /// Text input operator for Unity UI (uGUI) <c>InputField</c> and <c>TMP_InputField</c> component.
    /// </summary>
    /// <remarks>
    /// If no text is specified (e.g., in the case of monkey tests), a random string will be entered.
    /// </remarks>
    public class UguiTextInputOperator : ITextInputOperator, IRandomizable
    {
        /// <inheritdoc/>
        public ILogger Logger { private get; set; }

        /// <inheritdoc/>
        public ScreenshotOptions ScreenshotOptions { private get; set; }

        /// <inheritdoc/>
        public IRandom Random
        {
            set
            {
                _randomString.Random = value;
            }
        }

        private readonly Func<GameObject, RandomStringParameters> _randomStringParams;
        private readonly IRandomString _randomString;

        /// <summary>
        /// Input random text that is randomly generated by <paramref name="randomStringParams"/>
        /// </summary>
        /// <param name="randomStringParams">Random string generation parameters</param>
        /// <param name="randomString">Random string generator</param>
        /// <param name="logger">Logger, if omitted, use Debug.unityLogger (output to console)</param>
        /// <param name="screenshotOptions">Take screenshot options set if you need</param>
        public UguiTextInputOperator(
            Func<GameObject, RandomStringParameters> randomStringParams = null, IRandomString randomString = null,
            ILogger logger = null, ScreenshotOptions screenshotOptions = null)
        {
            _randomStringParams = randomStringParams ?? (_ => RandomStringParameters.Default);
            _randomString = randomString ?? new RandomStringImpl(new RandomWrapper());
            Logger = logger ?? Debug.unityLogger;
            ScreenshotOptions = screenshotOptions;
        }

        /// <inheritdoc />
        public bool CanOperate(GameObject gameObject)
        {
            if (gameObject == null)
            {
                return false;
            }

#if ENABLE_TMP
            return gameObject.TryGetEnabledComponent<InputField>(out _) ||
                   gameObject.TryGetEnabledComponent<TMP_InputField>(out _);
#else
            return gameObject.TryGetEnabledComponent<InputField>(out _);
#endif
        }

        /// <inheritdoc />
        /// <remarks>
        /// This method does not use a <c>raycastResult</c>.
        /// </remarks>
        [SuppressMessage("ReSharper", "UnusedParameter.Local")]
        public async UniTask OperateAsync(GameObject gameObject, RaycastResult _ = default,
            CancellationToken cancellationToken = default)
        {
            Func<GameObject, RandomStringParameters> randomStringParams;
            if (gameObject.TryGetEnabledComponent<InputFieldAnnotation>(out var annotation))
            {
                // Overwrite rule if annotation is attached.
                randomStringParams = __ => new RandomStringParameters(
                    (int)annotation.minimumLength,
                    (int)annotation.maximumLength,
                    annotation.charactersKind);
            }
            else
            {
                randomStringParams = _randomStringParams;
            }

            var text = _randomString.Next(randomStringParams(gameObject));
            await OperateAsync(gameObject, text, cancellationToken);
        }

        /// <inheritdoc />
        public async UniTask OperateAsync(GameObject gameObject, string text,
            CancellationToken cancellationToken = default)
        {
            // Output log before the operation, after the shown effects
            var operationLogger = new OperationLogger(gameObject, this, Logger, ScreenshotOptions);
            operationLogger.Properties.Add("text", $"\"{text}\"");
            await operationLogger.Log();

            // Note: The OnSelect event is not sent to prevent the TouchScreenKeyboard from being displayed.

            await UniTask.SwitchToMainThread(cancellationToken);

            // Input text
            if (gameObject.TryGetEnabledComponent<InputField>(out var inputField))
            {
                inputField.text = text;
#if UNITY_2021_1_OR_NEWER
                inputField.onSubmit?.Invoke(inputField.text);
#endif
                inputField.onEndEdit?.Invoke(inputField.text);
            }
#if ENABLE_TMP
            if (gameObject.TryGetEnabledComponent<TMP_InputField>(out var tmpInputField))
            {
                if (tmpInputField.onValidateInput != null)
                {
                    var completeText = new StringBuilder();
                    for (var i = 0; i < text.Length; i++)
                    {
                        var validChar = tmpInputField.onValidateInput.Invoke(completeText.ToString(), i, text[i]);
                        if (validChar != '\0')
                        {
                            completeText.Append(validChar);
                            tmpInputField.text = completeText.ToString();
                        }
                    }
                }
                else
                {
                    tmpInputField.text = text;
                }
#if !UNITY_STANDALONE
                tmpInputField.onTouchScreenKeyboardStatusChanged?.Invoke(TouchScreenKeyboard.Status.Done);
#endif
                tmpInputField.onSubmit?.Invoke(tmpInputField.text);
                tmpInputField.onEndEdit?.Invoke(tmpInputField.text);
            }
#endif
        }
    }
}
